"Here are the major points of our paper\n\nAbstract:\n\n-Something about the organization and what they do for events, etc\n\nProblem description:\n\n-Describe the problem of scheduling and minimizing volunteers\n\nSimplifications:\n\nAssumptions:\n  Volunteers will work in continuous chunks of 2 - 6 hours each\n  each shift will be from 30 minutes to 2 hours\n  each volunteer can get from shift to shift in very little time\n  probably more...\n\nMathematical Model:\n\n-Variant of the Bin packing problem.\n-Volunteers are bins. Shifts are items.\n-Volunteer bins have certain slots open.\n-Shifts can only be placed into bins in a certain way\n-Almost 1D bin packing, where bins are 1x24 in length, items are 1xm, and can only by slotted into slots that match up with time\n-we mitigate this time slotting issue by bringing the \"capacity\" of the bin to infinity if adding a shift conflicts with the time of an already assigned shift.\n-we also take care of the availability of each volunteer by \"pre-filling\" each volunteer bin with a pseudo-shift which represents the times that volunteer is NOT able to work\n\n\nSolution of the mathematical problem:\n\n- We will attempt to provide the minimum number of volunteers needed to cover each shift (assign all shifts to volunteers such that the number of volunteers with assigned shifts is minimized)\n- We will present approximation algorithms (BFD) which runs fast but does not guarantee optimality.\n- Approx algo will return at most 11/9 * OPT + 4, which isn't too bad\n- Exact solution (Korf) is too memory intensive for our problem \n- We will take the set of volunteers, and run the BFD algo on 1000 randomized sets of our volunteers, and take the best one\n- We will then try to balance out the schedule to make it more sane for practical purposes.\n\nResults:\n\n- Present the schedules with randomized data and interpret the results\n- show how the algorithms compared, and where they fall short.\n\n\nImprovements:\n\n- Any localized swapping/balancing we can do to improve schedules?\n- How about alternative schedules / catching edge cases?\n\nConclusions:\n\n- blah blah blah, our algo works and improves things by x, y ,z\n- THis shit is hard, NP-complete. but our problem size was small so things kinda worked out.\n\nAcknowledgements:\n\n- Make sure to thank Prof Sara Billey!!!!\n- Anyone else?\n\nReferences:\n\n-Korf\n-Martello Toth\n-Algorithm Design Manual (Steven Skiena)\n-Other papers in the notes folder?\n\nVerification statement:\n\nWe get his later?\n\n\nAppendix:\n\nCopy of the code that was written.\n"
{"patch":[[[[0,".\n- "],[-1,"Approx algo will return at most 11/9 * OPT + 4, which isn't too bad\n- Exact solution (Korf) is too memory intensive for our problem \n- We will take the set of volunteers, and run the BFD algo on 1000 randomized sets of our volunteers, and take the best one"],[1,"We will also present a bin completion algorithm which does find an optimal solution using an \"any-time\" algorithm. This is from Korf, et al."],[0,"\n- W"]],1420,1420,264,148]],"time":1425287753945}