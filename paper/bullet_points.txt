Here are the major points of our paper

Abstract:

-Something about the organization and what they do for events, etc

Problem description:

-Describe the problem of scheduling and minimizing volunteers

Simplifications:

Assumptions (Updated):
  each job consists of 1 - 6 shifts
  each shift is 1 hour in length
  each volunteer can get from shift to shift in very little time
  Volunteers will be available in continuous chunks of time
  Each volunteer is able to perform any job
  There are no breaks
  All shifts for a day can be contained in a 24 hour period (no 25+ hour continuous events)

Mathematical Model:

-Variant of the Bin packing problem.
-Volunteers are bins. Shifts are items.
-Volunteer bins have certain slots open.
-Shifts can only be placed into bins in a certain way
-Almost 1D bin packing, where bins are 1x24 in length, items are 1xm, and can only by slotted into slots that match up with time
-we mitigate this time slotting issue by bringing the "capacity" of the bin to infinity if adding a shift conflicts with the time of an already assigned shift.
-we also take care of the availability of each volunteer by "pre-filling" each volunteer bin with a pseudo-shift which represents the times that volunteer is NOT able to work


Solution of the mathematical problem:

- We will attempt to provide the minimum number of volunteers needed to cover each shift (assign all shifts to volunteers such that the number of volunteers with assigned shifts is minimized)
- We will present approximation algorithms (BFD) which runs fast but does not guarantee optimality.
- Approx algo will return at most 11/9 * OPT + 4, which isn't too bad
- Exact solution (Korf) is too memory intensive for our problem
- We will take the set of volunteers, and run the BFD algo on 1000 randomized sets of our volunteers, and take the best one
- We will then try to balance out the schedule to make it more sane for practical purposes.

Results:

- Present the schedules with randomized data and interpret the results
- show how the algorithms compared, and where they fall short.


Improvements:

- Any localized swapping/balancing we can do to improve schedules?
- How about alternative schedules / catching edge cases?

Conclusions:

- blah blah blah, our algo works and improves things by x, y ,z
- THis shit is hard, NP-complete. but our problem size was small so things kinda worked out.

Acknowledgements:

- Make sure to thank Prof Sara Billey!!!!
- Anyone else?

References:

-Korf
-Martello Toth
-Algorithm Design Manual (Steven Skiena)
-Other papers in the notes folder?

Verification statement:

We get his later?


Appendix:

Copy of the code that was written.
