"\\documentclass[12pt]{article}\n\\usepackage{amsmath,amssymb,amsthm}\n\\usepackage{graphicx}\n\\usepackage[ruled,vlined,linesnumbered]{algorithm2e}\n\n\\title{Revised Project Proposal}\n\\author{John Jeng, Samvel Stepanyan}\n\\date{January 22nd, 2015}\n\\pagestyle{myheadings}\n\\markright{}\n\n\\setlength\\parindent{24pt}\n\n% Custom commands\n\\newcommand{\\Z}{\\mathbb{Z}}\n\\newcommand{\\C}{\\mathbb{C}}\n\\newcommand{\\pem}{$ (\\pi, E) $~}\n\n\\newtheorem{PF}{Proof}\n\\theoremstyle{definition}\n\\newtheorem{Def}{Definition}\n\\newtheorem{Thm}{Theorem}\n\\newtheorem{lemma}{Lemma}\n\n\\begin{document}\n\\maketitle\n%===================================\n% Describing the problem\n%===================================\n\\section{Introduction}\n\nSavoy Swing Club (SSC) is local non-profit organization that currently seeks to teach swing dancing to middle and high school kids in the greater Seattle area. They are also heavily involved with two ``dance weekends'': Seattle Lindy Exchange (SLX) and Killerdiller Weekend (KDW).\n\nThe format of dance weekends includes live bands, classes, performances, and competitions. All of these activities require volunteers to make the weekend go smoothly. Each volunteer has a set of capabilities (sound, driving, door management, etc) and preferences for which hours (and possibly how many) they are volunteering. Volunteers are compensated based on the number of hours they work and the type of work. For example, 8 hours of volunteering might mean ``full pass'' (access to all classes and evening dances) while fewer hours of volunteering might just mean a ``dance pass'' (only access to evening dances) or a ``partial full pass'' (eg. classes and evening dances on Saturday only). A technician however, might receive a full weekend pass and additional cash compensation for just 6 hours of work.\n\nGiven hourly requirements for various jobs and a set of volunteers, SSC would like to minimize the total compensation payout while adhering as much as possible to the volunteers’ preferences. As a side note, SSC would like to pay out in passes as much as possible over cash since the realized expense is much lower than raw cash expenses.\nAssignments are currently done by hand. Based on the event organizers, staffing is often times too low in some places and too high in other places. For people like technicians, low staffing may leave a sour taste in their mouth when their discounted rates get pushed for value. As a result, fewer quality people volunteer for these critical positions over time. Over staffing in places like check-in can lead to an unnecessarily high number of comped dancers. More often times though, it’s simply value that could be elsewhere.\n\nModeling the volunteer schedule will allow these events to run more consistently and provide a benchmark for further analysis in consecutive years. It will allow SSC’s event organizers to make more accurate decisions based on the numbers instead of just their gut feeling. Better events draws more people into the community and helps retain old members.\n\nFrom SSC's board of directors, we've consulted Andrew Rogers and Jonathan H. Keith. We will continue to check in with them as the project progresses to ensure that the analysis continues to meet their needs. \n\nFrom our homework, we have already seen a way to solve a very basic version of this problem. Our simplest model will assume that each volunteer only has one skill and that we can have them work whichever hours we want. We will solve X of these basic problems for the X jobs involved. From there we will try to incorporate volunteer preferences and time restrictions. Then we will try to implement a model where we recognize that each volunteer may have multiple capabilities.\n\nThis will help SSC saving money as well as automate their current manual process of scheduling work. \n\n%===================================\n% Breaking down the problem\n%===================================\n\\section{Goal and Constraints}\n\\noindent Our objective is to produce an assignment of volunteers to jobs that minimizes our total cost subject to these constraints:\n\\begin{itemize} \\itemsep1pt \\parskip0pt \\parsep0pt\n\\item All jobs have the necessary number of assigned volunteers.\n\\item A job is assigned a volunteer only if the volunteer is able to work that time period.\n\\item At any given time a volunteer is only assigned a single job.\n\\item Each volunteer must work a minimum of $m$ hours.\n\\item No volunteer can work more than T* consecutive hours without taking a break. \n\\end{itemize}\n*Varies based on need by Savoy Swing club.\n\n\\noindent An individual volunteer may have any of the following restrictions:\n\\begin{itemize} \\itemsep1pt \\parskip0pt \\parsep0pt\n\\item Can work no more than M hours.\n\\item Is only available to work certain hours.\n\\item Has an poset of prefered work times.\n\\item Can only work certain job types.\n\\end{itemize}\n\n%===================================\n% Modeling the problem\n%===================================\n\n\\section{Modeling the Problem}\nLet $V = \\{v_1, \\ldots , v_n\\}$ represent volunteers.\\\\\nLet each $v_i$ have associated availability $A_i$ and skills $S_i$\\\\\nLet $W = \\{w_1, \\ldots , w_m\\}$ represent jobs. \\\\\nEach job $w_i$ has a beginning time ($b_i$), finish time ($f_i$), and a job type ($t_i$).\n\\vspace{4mm}\n\n\\noindent Let $G = (V, W)$ be a bipartite graph defined as follows:\\\\\nEach edge $(v_i, w_j)$ is in $E(G)$ if and only if volunteer $i$ is able to (both skill and time wise)\nto take on job $j$. Each edge also has an associated weight that represents the cost of having\nvolunteer $v$ be assigned to job $w$.\n\\vspace{4mm}\n\n\\noindent Let $M_k$ be the set containing $k$ edge sets where each $w \\in W$ is represented in at\nleast one edge in each of the $k$ sets, and each such edge set does not violate any of our previously \nstated constraints.\n\\vspace{4mm}\n\n\\noindent We will define a new set $C = \\{c_1, \\ldots , c_k\\}$ where $c_i = \\sum_{m \\in M_j}\\;m$ \nfor $j = 1, 2, ... k$. Then the optimal solution will be $c_s = min\\{c_1, \\ldots c_k\\}$. And the corresponding schedule will be represented by the set of edges $M_s$.\n\n\\end{document}\n\n\n%\n% Let's make sure we have these covered. \n%\n\n% 1. The names of the people on the team.                                                   Yes\n% 2. A project title.                                                                       Not yet\n% 3. A clear explanation of the phenomenon to be modeled and a clearly stated goal.         Yes?\n% 4. A brief description of the impact on the community and a list of community contacts\n% you have consulted.                                                                       Yes?\n% 5. Ideas on the methods you plan to use in modeling.                                      Uhh, almost.\n% 6. Give a small example of your main problem. Translate it into a mathematical problem\n% which you can solve and interpret the results.                                            Nope?\n% 7. References that can aid your modeling (include references relating to the topic and for\n% your proposed methods of solution.)                                                       No idea"
{"patch":[[[[0,"ling the problem"],[1," [Graph]"],[0,"\n%=============="]],4892,4892,32,40]],"time":1423073548690}
{"patch":[[[[0," Problem"],[1," [Graph]"],[0,"}\nLet $V"]],4976,4976,16,24]],"time":1423073546249}
{"patch":[[[[0,"{}\n\n"],[-1,"\\setlength\\parindent{24pt}\n\n% Custom commands"],[1,"% Custom commands\n\\newcommand{\\sumleft}{\\sum\\limits_{i=1}^n i^3}\n\\newcommand{\\sumright}{\\left(\\sum\\limits_{i=1}^n i \\right)^2}"],[0,"\n\\ne"]],271,271,53,134],[[[0,"tle\n"],[-1,"%===================================\n% Describing the problem\n%==================================="],[0,"\n\\se"]],647,647,106,8],[[[0,"le area."],[-1," "],[1,"\n"],[0,"They are"]],827,827,17,17],[[[0,"ith "],[-1,"two ``"],[1,"2 “"],[0,"danc"]],868,868,14,11],[[[0,"weekends"],[-1,"''"],[1,"”"],[0,": Seattl"]],881,881,18,17],[[[0," require"],[1,"s"],[0," volunte"]],1068,1068,16,17],[[[0,"moothly."],[-1," "],[1,"\n"],[0,"Each vol"]],1113,1113,17,17],[[[0,"teering."],[-1," "],[1,"\n"],[0,"Voluntee"]],1272,1272,17,17],[[[0,"of work."],[-1," "],[1,"\n"],[0,"For exam"]],1360,1360,17,17],[[[0,"ht mean "],[-1,"``"],[1,"“"],[0,"full pas"]],1409,1409,18,17],[[[0,"ull pass"],[-1,"''"],[1,"”"],[0," (access"]],1419,1419,18,17],[[[0," mean a "],[-1,"``"],[1,"“"],[0,"dance pa"]],1516,1516,18,17],[[[0,"nce pass"],[-1,"''"],[1,"”"],[0," (only a"]],1527,1527,18,17],[[[0,"r a "],[-1,"``"],[1,"“"],[0,"part"]],1570,1570,10,9],[[[0,"pass"],[-1,"''"],[1,"”"],[0," (eg"]],1588,1588,10,9],[[[0,"y only)."],[-1," "],[1,"\n"],[0,"A techni"]],1636,1636,17,17],[[[0,"es.\n"],[-1,"Assignments are currently done by hand. Based on the event organizers, staffing is often times too low in some places and too high in other places. For people like technicians, low staffing may leave a sour taste in their mouth when their discounted rates get pushed for value. As a result, fewer quality people volunteer for these critical positions over time. Over staffing in places like check-in can lead to an unnecessarily high number of comped dancers. More often times though, it’s simply value that could be elsewhere.\n\nModeling the volunteer schedule will allow these events to run more consistently and provide a benchmark for further analysis in consecutive years. It will allow SSC’s event organizers to make more accurate decisions based on the numbers instead of just their gut feeling. Better events draws more people into the community and helps retain old members.\n\nFrom SSC's board of directors, we've consulted Andrew Rogers and Jonathan H. Keith. We will continue to check in with them as the project progresses to ensure that the analysis continues to meet their needs. \n\nFrom our homework, we have already seen a way to solve a very basic version of this problem. Our simplest model will assume that each volunteer only has one skill and that we can have them work whichever hours we want. We will solve X of these basic problems for the X jobs involved. From there we will try to incorporate volunteer preferences and time restrictions. Then we will try to implement a model where we recognize that each volunteer may have multiple capabilities.\n\nThis will help SSC saving money as well as automate their current manual process of scheduling work. \n\n%===================================\n% Breaking down the problem\n%===================================\n\\section{Goal and Constraints}\n\\noindent Our objective is to produce an assignment of volunteers to jobs that minimizes our total cost subject to these constraints:\n\\begin{itemize} \\itemsep1pt \\parskip0pt \\parsep0pt\n\\item All jobs have the necessary number of assigned volunteers.\n\\item A job is assigned a volunteer only if the volunteer is able to work that time period.\n\\item At any given time a volunteer is only assigned a single job.\n\\item Each volunteer must work a minimum of $m$ hours.\n\\item No volunteer can work more than T* consecutive hours without taking a break. \n\\end{itemize}\n*Varies based on need by Savoy Swing club.\n\n\\noindent An individual volunteer may have any of the following restrictions:\n\\begin{itemize} \\itemsep1pt \\parskip0pt \\parsep0pt\n\\item Can work no more than M hours.\n\\item Is only available to work certain hours.\n\\item Has an poset of prefered work times.\n\\item Can only work certain job types.\n\\end{itemize}\n\n%===================================\n% Modeling the problem [Graph]\n%===================================\n\n\\section{Modeling the Problem [Graph]}\nLet $V = \\{v_1, \\ldots , v_n\\}$ represent volunteers.\\\\\nLet each $v_i$ have associated availability $A_i$ and skills $S_i$\\\\\nLet $W = \\{w_1, \\ldots , w_m\\}$ represent jobs. \\\\\nEach job $w_i$ has a beginning time ($b_i$), finish time ($f_i$), and a job type ($t_i$).\n\\vspace{4mm}\n\n\\noindent Let $G = (V, W)$ be a bipartite graph defined as follows:\\\\\nEach edge $(v_i, w_j)$ is in $E(G)$ if and only if volunteer $i$ is able to (both skill and time wise)\nto take on job $j$. Each edge also has an associated weight that represents the cost of having\nvolunteer $v$ be assigned to job $w$.\n\\vspace{4mm}\n\n\\noindent Let $M_k$ be the set containing $k$ edge sets where each $w \\in W$ is represented in at\nleast one edge in each of the $k$ sets, and each such edge set does not violate any of our previously \nstated constraints.\n\\vspace{4mm}\n\n\\noindent We will define a new set $C = \\{c_1, \\ldots , c_k\\}$ where $c_i = \\sum_{m \\in M_j}\\;m$ \nfor $j = 1, 2, ... k$. Then the optimal solution will be $c_s = min\\{c_1, \\ldots c_k\\}$. And the corresponding schedule will be represented by the set of edges $M_s$.\n\n\\end{document}\n\n\n%\n% Let's make sure we have these covered. \n%\n\n% 1. The names of the people on the team.                                                   Yes\n% 2. A project title.                                                                       Not yet\n% 3. A clear explanation of the phenomenon to be modeled and a clearly stated goal.         Yes?\n% 4. A brief description of the impact on the community and a list of community contacts\n% you have consulted.                                                                       Yes?\n% 5. Ideas on the methods you plan to use in modeling.                                      Uhh, almost.\n% 6. Give a small example of your main problem. Translate it into a mathematical problem\n% which you can solve and interpret the results.                                            Nope?\n% 7. References that can aid your modeling (include references relating to the topic and for\n% your proposed methods of solution.)                                                       No idea"],[1,"\n\n\n\\end{document}\n"]],2096,2096,5000,22]],"time":1423073529226}
{"patch":[[[[0,"nses.\n\n\n"],[-1,"\n"],[0,"\\end{doc"]],2094,2094,17,16]],"time":1423025128713}
{"patch":[[[[0,"enses.\n\n"],[-1,"\n"],[0,"\\end{doc"]],2093,2093,17,16]],"time":1423025127922}
{"patch":[[[[0,"enses.\n\n"],[1,"\n"],[0,"\\end{doc"]],2093,2093,16,17]],"time":1423025003686}
{"patch":[[[[0,"nses.\n\n\n"],[1,"=\n"],[0,"\\end{doc"]],2094,2094,16,18]],"time":1423025002962}
{"patch":[[[[0,"nses.\n\n\n"],[-1,"="],[1,"\\begin{thebibliography}{9}\n\n\n\\end{thebibliography}\n"],[0,"\n\\end{do"]],2094,2094,17,67]],"time":1423025002175}
{"patch":[[[[0,"phy}{9}\n"],[1,"\\bibitem{Fed87}\n\tGreg N Federickson.\n\tFast algorithms for shortest paths in planar graphs, with applications.\n\tSIAM Journal on Computing, 16(6):1004-1022,\n\t1987\n\n\\bibitem{Klein13}\n\tMonika R. Henzinger, Philip Klein, Satish Rao, Sairam Subramanian.\n\tFaster Shortest-Path Algorithms for Planar Graphs\n\tJournal of Computer and System Sciences Article NO. SS971493\n\t1997"],[0,"\n\n\\end{t"]],2121,2121,16,382]],"time":1423024999301}
{"patch":[[[[0,"nses.\n\n\n"],[1,"\n"],[0,"\\begin{t"]],2094,2094,16,17]],"time":1423024994651}
{"patch":[[[[0,"enses.\n\n"],[1,"\\section{Computer Science Reference}\n\n\n\\subsection{Introductory Notions}\n\n\n\\subsection{Basic Definitions}\n\n\\begin{Def}\n\tBig O notation:\n\n\tLet $f$ and $g$ be functions defined on some subset of the real numbers.\n\tThen we say that $f(x) = O(g(x))$ iff there exists a positive real number C and a real number $x_0$ such that\n\t\\[|f(x)| \\leq C|g(x)|\\text{ for all } x \\geq x_0\\]\n\\end{Def}\n\n\\begin{Def}\n\tA \\textit{loop invariant} is a condition that is necessarily true at the very beginning and very end of each iteration in some loop.\n\\end{Def}\n\n\\subsection{Priority Queues}\nA priority queue is a part of a class of objects in computer science called abstract data types (ADT). \nReal implementations vary but ADTs are used to analyze space requirements and running time.\n\nIn general, a priority queue can be thought of as an emergency room.\nHigher priority data (objects, patients) gets dequeued (processed, treated) before those of a lower priority.\nTypically this means there is a least value that is set as the highest priority.\n\nThe most basic priority queue just has the following methods (equivically understood as functions, jobs, utilities, capabilities, or features):\n\\begin{enumerate}\n\t\\item Add(Item i): This tells the priority queue to \"enqueue\" Item i which is to instruct it to appropriately place Item i into the wait list based on its priority.\n\t\\item Extract\\_min(): This tells the priority queue to return the \n\\end{enumerate}\nThis allows the program to store items based on their priorty and retrieve the highest priority one.\n\nRunning time for each operation varies on the implementation, but we will assume a fibonacci heap in our case.\nThus Add and Update\\_priority will run in $O(1)$ time and Extract\\_min will run in $O(\\log n)$ time where $n$ is the number of items in the priority queue.\n\n\\subsection{Trees}\nFor these next two subsections, our starting novice may do well to read the introductory section on Graph Theory.\n\n\n\\subsection{Dijkstra}\nIn this section we introduce Dijkstra's a algorithm for shortest path on general graphs with non-negative edge weights as we will emulate it in our main result.\n\nThe idea behind Disjkstra's algorithm is to mark all nodes that aren't the source node to initiailly to have a distance (denoted $d[v]$) equal to infinity. \nThen, as we traverse the graph from the source node, we update the shortest path to each v until we have traversed the entire graph.\n\nWhen implemented with a fibbonacci heap, Disjkstra's algorithm runs in $O (m + n\\log n)$ time where m is the number of edges and n is the number of vertices.\nWe will not prove its correctness or running time here as it can be found in any introductory text on algorithms. \n\n\\begin{algorithm}[H]\n\\DontPrintSemicolon\ndist[$source$] := 0\\;\n\\ForEach{vertex $v$ in Graph}{\n\t\\If{$v \\neq source$}{\n\t\tdist[$v$] := infinity\\;\n\t\tprevious[$v$] := undefined\\;\n\t}\n\tPQ.add($v$, dist[$v$])\\;\n}\n\\While{PQ is not empty}{\nu := PQ.extract\\_min()\\;\n\\ForEach{neighbor v of u}{\n\talt = dist[u] + length(u,v)\\;\n\t\\If{$\\text{alt} < \\text{dist}[v]$}{\n\t\tdist[v] := alt\\;\n\t\tprevious[v] := u\\;\n\t\tPQ.decrease\\_priority(v,alt)\\;\n\t}\n}\n}\n\\caption{Dijkstra's algorithm}\n\\end{algorithm}\n"],[0,"\n\n\\begin"]],2093,2093,16,3188]],"time":1423024993024}
{"patch":[[[[0,", classe"],[-1,"s"],[0,", perfor"]],1002,1002,17,16]],"time":1423024978254}
{"patch":[[[[0,"cument}\n"],[1,"%Begin Formalities========\n%=========================\n"],[0,"\\maketit"]],632,632,16,70]],"time":1423024961500}
{"patch":[[[[0,"aketitle"],[1,"\n% No Abstract here!\n\\newpage\n%End Formalities=========\n%========================"],[0,"\n\n\\secti"]],696,696,16,97]],"time":1423024959259}
{"patch":[[[[0,"newpage\n"],[1,"\\tableofcontents\n\\newpage\n"],[0,"%End For"]],726,726,16,42]],"time":1423024951875}
{"patch":[[[[0," her"],[-1,"e!"],[0,"\n\\ne"]],718,718,10,8]],"time":1423024938358}
{"patch":[[[[0,"trac"],[-1,"t her"],[0,"\n\\ne"]],713,713,13,8]],"time":1423024937598}
{"patch":[[[[0," No Abst"],[-1,"rac"],[0,"\n\\newpag"]],706,706,19,16]],"time":1423024936881}
{"patch":[[[[0," No "],[-1,"Abst"],[0,"\n\\ne"]],706,706,12,8]],"time":1423024936093}
{"patch":[[[[0,"tle\n% No"],[-1," "],[0,"\n\\newpag"]],701,701,17,16]],"time":1423024935342}
{"patch":[[[[0,"etitle\n%"],[-1," No"],[0,"\n\\newpag"]],698,698,19,16]],"time":1423024934649}
{"patch":[[[[0,"ketitle\n"],[-1,"%"],[0,"\n\\newpag"]],697,697,17,16]],"time":1423024933841}
{"patch":[[[[0,"ketitle\n"],[-1,"\n"],[0,"\\newpage"]],697,697,17,16]],"time":1423024930205}
{"patch":[[[[0,"ketitle\n"],[1,"\n"],[0,"\\newpage"]],697,697,16,17]],"time":1423024927523}
{"patch":[[[[0,"ketitle\n"],[1,"\\begin{abstract}\n\tYay \n\\end{abstract}"],[0,"\n\\newpag"]],697,697,16,53]],"time":1423024926333}
{"patch":[[[[0," Proposa"],[-1,"l"],[0,"}\n\\autho"]],164,164,17,16]],"time":1423024915432}
{"patch":[[[[0," Pro"],[-1,"posa"],[0,"}\n\\a"]],164,164,12,8]],"time":1423024914678}
{"patch":[[[[0,"ject Pro"],[1,"o"],[0,"}\n\\autho"]],160,160,16,17]],"time":1423024913970}
{"patch":[[[[0,"Project "],[-1,"Proo"],[0,"}\n\\autho"]],157,157,20,16]],"time":1423024913180}
{"patch":[[[[0," Pro"],[-1,"ject "],[0,"}\n\\a"]],156,156,13,8]],"time":1423024912461}
{"patch":[[[[0,"Revised "],[-1,"Pro"],[0,"}\n\\autho"]],149,149,19,16]],"time":1423024911720}
{"patch":[[[[0,"le{Revis"],[-1,"ed "],[0,"}\n\\autho"]],146,146,19,16]],"time":1423024910927}
{"patch":[[[[0,"le{R"],[-1,"evis"],[0,"}\n\\a"]],146,146,12,8]],"time":1423024910218}
{"patch":[[[[0,"tclass[1"],[-1,"2"],[1,"1"],[0,"pt]{arti"]],8,8,17,17],[[[0,"m}\n\\"],[-1,"usepackage{graphicx}\n\\usepackage[ruled,vlined,linesnumbered]{algorithm2e}\n\n\\title{R}\n\\author{John Jeng, Samvel Stepanyan}\n\\date{January 22nd, 2015}\n\\pagestyle{myheadings}\n\\markright{}\n\n% Custom commands\n\\newcommand{\\sumleft}{\\sum\\limits_{i=1}^n i^3}\n\\newcommand{\\sumright}{\\left(\\sum\\limits_{i=1}^n i \\right)^2}\n\\newcommand{\\Z}{\\mathbb{Z}}\n\\newcommand{\\C}{\\mathbb{C}}\n\\newcommand{\\pem}{$ (\\pi, E) $~"],[1,"addtolength{\\evensidemargin}{-.5in}\n\\addtolength{\\oddsidemargin}{-.5in}\n\\addtolength{\\textwidth}{0.8in}\n\\addtolength{\\textheight}{0.8in}\n\\addtolength{\\topmargin}{-.4in"],[0,"}\n"],[-1,"\n"],[0,"\\new"]],63,63,410,177],[[[0,"orem"],[-1,"{PF}{Proof}\n\\theoremstyle{definition}\n\\newtheorem{Def}{Definition}\n\\newtheorem{Thm}{Theorem}\n\\newtheorem{lemma}{Lemma}\n\n\\begin{document}\n%Begin Formalities========\n%=========================\n\\maketitle\n\\begin{abstract}\n\tYay \n\\end{abstract}\n\\newpage\n\\tableofcontents\n\\newpage\n%End Formalities=========\n%========================\n\n\\section{Introduction}\n\nSavoy Swing Club (SSC) is local non-profit organization that currently seeks to teach swing dancing to middle and high school kids in the greater Seattle area.\nThey are also heavily involved with 2 “dance weekends”: Seattle Lindy Exchange (SLX) and Killerdiller Weekend (KDW).\n\nThe format of dance weekends includes live bands, classe, performances, and competitions. All of these activities requires volunteers to make the weekend go smoothly.\nEach volunteer has a set of capabilities (sound, driving, door management, etc) and preferences for which hours (and possibly how many) they are volunteering.\nVolunteers are compensated based on the number of hours they work and the type of work.\nFor example, 8 hours of volunteering might mean “full pass” (access to all classes and evening dances) while fewer hours of volunteering might just mean a “dance pass” (only access to evening dances) or a “partial full pass” (eg. classes and evening dances on Saturday only).\nA technician however, might receive a full weekend pass and additional cash compensation for just 6 hours of work.\n\nGiven hourly requirements for various jobs and a set of volunteers, SSC would like to minimize the total compensation payout while adhering as much as possible to the volunteers’ preferences. As a side note, SSC would like to pay out in passes as much as possible over cash since the realized expense is much lower than raw cash expenses.\n\n\\section{Computer Science Reference}\n\n\n\\subsection{Introductory Notions}\n\n\n\\subsection{Basic Definitions}\n\n\\begin{Def}\n\tBig O notation:\n\n\tLet $f$ and $g$ be functions defined on some subset of the real numbers.\n\tThen we say that $f(x) = O(g(x))$ iff there exists a positive real number C and a real number $x_0$ such that\n\t\\[|f(x)| \\leq C|g(x)|\\text{ for all } x \\geq x_0\\]\n\\end{Def}\n\n\\begin{Def}\n\tA \\textit{loop invariant} is a condition that is necessarily true at the very beginning and very end of each iteration in some loop.\n\\end{Def}\n\n\\subsection{Priority Queues}\nA priority queue is a part of a class of objects in computer science called abstract data types (ADT). \nReal implementations vary but ADTs are used to analyze space requirements and running time.\n\nIn general, a priority queue can be thought of as an emergency room.\nHigher priority data (objects, patients) gets dequeued (processed, treated) before those of a lower priority.\nTypically this means there is a least value that is set as the highest priority.\n\nThe most basic priority queue just has the following methods (equivically understood as functions, jobs, utilities, capabilities, or features):\n\\begin{enumerate}\n\t\\item Add(Item i): This tells the priority queue to \"enqueue\" Item i which is to instruct it to appropriately place Item i into the wait list based on its priority.\n\t\\item Extract\\_min(): This tells the priority queue to return the \n\\end{enumerate}\nThis allows the program to store items based on their priorty and retrieve the highest priority one.\n\nRunning time for each operation varies on the implementation, but we will assume a fibonacci heap in our case.\nThus Add and Update\\_priority will run in $O(1)$ time and Extract\\_min will run in $O(\\log n)$ time where $n$ is the number of items in the priority queue.\n\n\\subsection{Trees}\nFor these next two subsections, our starting novice may do well to read the introductory section on Graph Theory.\n\n\n\\subsection{Dijkstra}\nIn this section we introduce Dijkstra's a algorithm for shortest path on general graphs with non-negative edge weights as we will emulate it in our main result.\n\nThe idea behind Disjkstra's algorithm is to mark all nodes that aren't the source node to initiailly to have a distance (denoted $d[v]$) equal to infinity. \nThen, as we traverse the graph from the source node, we update the shortest path to each v until we have traversed the entire graph.\n\nWhen implemented with a fibbonacci heap, Disjkstra's algorithm runs in $O (m + n\\log n)$ time where m is the number of edges and n is the number of vertices.\nWe will not prove its correctness or running time here as it can be found in any introductory text on algorithms. \n\n\\begin{algorithm}[H]\n\\DontPrintSemicolon\ndist[$source$] := 0\\;\n\\ForEach{vertex $v$ in Graph}{\n\t\\If{$v \\neq source$}{\n\t\tdist[$v$] := infinity\\;\n\t\tprevious[$v$] := undefined\\;\n\t}\n\tPQ.add($v$, dist[$v$])\\;\n}\n\\While{PQ is not empty}{\nu := PQ.extract\\_min()\\;\n\\ForEach{neighbor v of u}{\n\talt = dist[u] + length(u,v)\\;\n\t\\If{$\\text{alt} < \\text{dist}[v]$}{\n\t\tdist[v] := alt\\;\n\t\tprevious[v] := u\\;\n\t\tPQ.decrease\\_priority(v,alt)\\;\n\t}\n}\n}\n\\caption{Dijkstra's algorithm}\n\\end{algorithm}\n\n\n\\begin{thebibliography}{9}\n\\bibitem{Fed87}\n\tGreg N Federickson.\n\tFast algorithms for shortest paths in planar graphs, with applications.\n\tSIAM Journal on Computing, 16(6):1004-1022,\n\t1987\n\n\\bibitem{Klein13}\n\tMonika R. Henzinger, Philip Klein, Satish Rao, Sairam Subramanian.\n\tFaster Shortest-Path Algorithms for Planar Graphs\n\tJournal of Computer and System Sciences Article NO. SS971493\n\t1997\n\n\\end{thebibliography}\n\n\\end{document}\n"],[1,"style{quest}{\\topsep}{\\topsep}{}{}{\\bfseries}{}{ }{\\thmname{#1}\\thmnote{ #3}.}\n\\theoremstyle{quest}\n\\newtheorem*{definition}{Definition}\n\\newtheorem*{theorem}{Theorem}\n\\newtheorem*{question}{Problem}\n\\newtheorem*{exercise}{Exercise}\n\\newtheorem*{challengeproblem}{Challenge Problem}\n\n\\newcommand{\\name}{AUTHOR}\n\\newcommand{\\hw}{X}\n\\newcommand{\\classtitle}{CLASS TITLE}\n\n\\title{\\vspace{-50pt}\n\\Huge \\name\n\\\\\\vspace{20pt}\n\\huge \\classtitle\\hfill Homework \\hw}\n\\author{}\n\\date{}\n\\pagestyle{myheadings}\n\\markright{\\name\\hfill Homework \\hw\\qquad\\hfill}\n\n% Custom commands\n\\newcommand{\\sumleft}{\\sum\\limits_{i=1}^n i^3}\n\\newcommand{\\sumright}{\\left(\\sum\\limits_{i=1}^n i \\right)^2}\n\\newcommand{\\Z}{\\mathbb{Z}}\n\\newcommand{\\C}{\\mathbb{C}}\n\n\\begin{document}\n\\maketitle\n\n\\end{document}"]],243,243,5387,780]],"time":1423024909632}
{"patch":[[[[0,"aketitle"],[1,"\n\\begin{question}[1]\n\tProof Statement.\n\\end{question}\n\\begin{proof}\n\\begin{align*}\n   \\sum\\limits_{i=1}^n i &= \\frac{n(n+1)}{2} & \\text{Starting with what we know} \\\\\n\t\\sumright &= \\frac{n^2(n+1)^2}{4}  & \\text{And by applying what we want}\n\\end{align*}\nNow we proceed by induction to show that:\n\\[\\sumleft = \\frac{n^2(n+1)^2}{4}\\]\n\nIn the base case where $n = 1$, \n\\[\\sumleft = \\frac{n^2(n+1)^2}{4} = \\frac{4}{4} = 1\\]\n\nNow if we assume it is true for $n$, we proceed to show it must be true for $n+1$.\n\\\\By definition of summations, if we have some $f(n)$ is a summation \n\\\\and $f(g(i)) = \\sum\\limits_{i=1}^n g(i)$ then:\n\\[f(n+1) = f(n) + g(n+1)\\]\n\nThus if we have $g(i) = i^3$, we must show\n\\[\\frac{(n+1)^2(n+2)^2}{4} = \\frac{n^2(n+1)^2}{4} + (n+1)^3\\] \n\n\\begin{align*}\n\t\\frac{(n+1)^2(n+2)^2}{4} &= \\frac{(n^2 + 2n + 1)(n^2 + 4n + 4)}{4} \\\\\n\t&= \\frac{n^4+4n^3+4n^2+2n^3+8n^2+8n+n^2+4n+4}{4} \\\\\n\t&= \\frac{n^4+6n^3+13n^2+12n+4}{4} \\\\\n\t\\frac{n^2(n+1)^2}{4} + (n+1)^3 &= \\frac{n^2(n^2+2n+1)}{4}+(n+1)(n^2+2n+1) \\\\\n\t&= \\frac{n^4+2n^3+n^2}{4} + \\frac{4n^3+8n^2+4n+4n^2+8n+4}{4} \\\\\n\t&= \\frac{n^4+6n^3+13n^2+12n+4}{4} \\\\\n\\end{align*}\nThus we have what we want and we are finished.\n\\end{proof}\n\n\n\\begin{question}[2]\n\n\\end{question}\n\\[\\]\n\n\\begin{question}[3a]\n\n\\end{question}\n\n\\begin{question}[3b]\n\n\\end{question}\n\\begin{proof}\n\n\\end{proof}\n\n\\begin{question}[3c]\n\\end{question}"],[0,"\n\n\\end{d"]],999,999,16,1386]],"time":1421967951343}
{"patch":[[[[0,"proof}\n\n"],[-1,"\n"],[0,"\\begin{q"]],2188,2188,17,16]],"time":1421967757319}
{"patch":[[[[0,"tatement"],[-1,"."],[0,"\n\\end{qu"]],1036,1036,17,16]],"time":1421967734943}
{"patch":[[[[0,"Statemen"],[-1,"t"],[1,"L:"],[0,"\n\\end{qu"]],1035,1035,17,18]],"time":1421967734178}
{"patch":[[[[0,"emen"],[-1,"L:"],[0,"\n\\en"]],1039,1039,10,8]],"time":1421967733478}
{"patch":[[[[0,"f St"],[-1,"atemen"],[0,"\n\\en"]],1033,1033,14,8]],"time":1421967732678}
{"patch":[[[[0,"\n\tProof "],[-1,"St"],[0,"\n\\end{qu"]],1027,1027,18,16]],"time":1421967731923}
{"patch":[[[[0,"]\n\tP"],[-1,"roof "],[0,"\n\\en"]],1026,1026,13,8]],"time":1421967731208}
{"patch":[[[[0,"n}[1]\n\tP"],[1,"rove by induction that for all n greater than or equal to :\n\t\\[\\sumleft = \\sumright\\]"],[0,"\n\\end{qu"]],1022,1022,16,101]],"time":1421967730421}
{"patch":[[[[0,"UTHO"],[-1,"R"],[1,"E"],[0,"}\n\\n"]],551,551,9,9]],"time":1421967719240}
{"patch":[[[[0,"e}{AUTHO"],[-1,"E"],[0,"}\n\\newco"]],547,547,17,16]],"time":1421967718450}
{"patch":[[[[0,"e}{A"],[-1,"UTHO"],[0,"}\n\\n"]],547,547,12,8]],"time":1421967717735}
{"patch":[[[[0,"{\\name}{"],[-1,"A"],[1,"John Jeng"],[0,"}\n\\newco"]],542,542,17,25]],"time":1421967716946}
{"patch":[[[[0,"hw}{"],[-1,"X"],[0,"}\n\\n"]],574,574,9,8]],"time":1421967712703}
{"patch":[[[[0,"nd{\\hw}{"],[1,"2"],[0,"}\n\\newco"]],570,570,16,17]],"time":1421967711933}
{"patch":[[[[0,"mmand{\\class"],[-1,"t"],[0,"itle}{CLASS "]],587,587,25,24]],"time":1421967694121}
{"patch":[[[[0,"d{\\class"],[1,"T"],[0,"itle}{CL"]],591,591,16,17]],"time":1421967693371}
{"patch":[[[[0," \\classt"],[-1,"itle"],[0,"\\hfill H"]],675,675,20,16]],"time":1421967691477}
{"patch":[[[[0," \\classt"],[1,"it"],[0,"\\hfill H"]],675,675,16,18]],"time":1421967690695}
{"patch":[[[[0,"\\classti"],[-1,"t"],[0,"\\hfill H"]],676,676,17,16]],"time":1421967689936}
{"patch":[[[[0," \\cl"],[-1,"assti"],[0,"\\hfi"]],675,675,13,8]],"time":1421967689220}
{"patch":[[[[0,"}\n\\huge "],[-1,"\\cl"],[0,"\\hfill H"]],668,668,19,16]],"time":1421967688426}
{"patch":[[[[0,"}\n\\huge "],[1,"CLAS"],[0,"\\hfill H"]],668,668,16,20]],"time":1421967687676}
{"patch":[[[[0,"uge CLAS"],[1,"S"],[0,"\\hfill H"]],672,672,16,17]],"time":1421967686925}
{"patch":[[[[0," TIT"],[-1,"LE"],[0,"}\n\n\\"]],611,611,10,8]],"time":1421967684737}
{"patch":[[[[0,"LASS"],[-1," TIT"],[0,"}\n\n\\"]],607,607,12,8]],"time":1421967683946}
{"patch":[[[[0,"Title}{C"],[-1,"LASS"],[0,"}\n\n\\titl"]],599,599,20,16]],"time":1421967683232}
{"patch":[[[[0,"sTitle}{"],[-1,"C"],[0,"}\n\n\\titl"]],598,598,17,16]],"time":1421967682444}
{"patch":[[[[0,"ssTitle}"],[-1,"{}"],[0,"\n\n\\title"]],597,597,18,16]],"time":1421967680371}
{"patch":[[[[0,"{\\classT"],[-1,"itle"],[0,"}\n\n\\titl"]],592,592,20,16]],"time":1421967678393}
{"patch":[[[[0,"d{\\class"],[-1,"T"],[0,"}\n\n\\titl"]],591,591,17,16]],"time":1421967677645}
{"patch":[[[[0,"nd{\\clas"],[-1,"s"],[0,"}\n\n\\titl"]],590,590,17,16]],"time":1421967676504}
{"patch":[[[[0,"ommand{\\"],[-1,"clas"],[0,"}\n\n\\titl"]],586,586,20,16]],"time":1421967675724}
{"patch":[[[[0,"command{"],[-1,"\\"],[0,"}\n\n\\titl"]],585,585,17,16]],"time":1421967674930}
{"patch":[[[[0,"wcommand"],[-1,"{}"],[0,"\n\n\\title"]],584,584,18,16]],"time":1421967674180}
{"patch":[[[[0,"ewcomman"],[-1,"d"],[0,"\n\n\\title"]],583,583,17,16]],"time":1421967673463}
{"patch":[[[[0,"{2}\n\\new"],[-1,"comman"],[0,"\n\n\\title"]],577,577,22,16]],"time":1421967672677}
{"patch":[[[[0,"hw}{2}\n\\"],[-1,"new"],[0,"\n\n\\title"]],574,574,19,16]],"time":1421967671963}
{"patch":[[[[0,"\\hw}{2}\n"],[-1,"\\"],[1,"'"],[0,"\n\n\\title"]],573,573,17,17]],"time":1421967671213}
{"patch":[[[[0,"{2}\n"],[-1,"'"],[0,"\n\n\\t"]],577,577,9,8]],"time":1421967670418}
{"patch":[[[[0,"hw}{2}\n\n"],[-1,"\n"],[0,"\\title{\\"]],574,574,17,16]],"time":1421967669674}
{"patch":[[[[0,"ge C"],[-1,"LASS"],[0,"\\hfi"]],635,635,12,8]],"time":1421967655089}
{"patch":[[[[0,"\n\\huge C"],[1,"SE 373"],[0,"\\hfill H"]],631,631,16,22]],"time":1421967654294}
{"patch":[[[[0,"ion}[2]\n"],[1,"\tOrder the following functions from slowest growth rate to the fastest growth rate.\n\t\\[n^2, n\\log n, \\frac{2}{n}, \\log^2 n, 2^n \\sqrt{n}, 56,\n\t\tn^2\\log n, n^{1.5}, 2^{n/2}, \\log n, n\\log n^2, n^5, \n\t\tn\\log\\log n, n\\log^2 n, n\\]"],[0,"\n\\end{qu"]],2239,2239,16,243]],"time":1421967598389}
{"patch":[[[[0,"on}[3c]\n"],[1,"\n"],[0,"\\end{que"]],2612,2612,16,17]],"time":1421967593200}
{"patch":[[[[0,"uestion}"],[1,"\nTrue"],[0,"\n\n\\end{d"]],2627,2627,16,21]],"time":1421967591229}
{"patch":[[[[-1,"\\documentclass[11pt]{article}\n\\usepackage{amsmath,amssymb,amsthm}\n\\addtolength{\\evensidemargin}{-.5in}\n\\addtolength{\\oddsidemargin}{-.5in}\n\\addtolength{\\textwidth}{0.8in}\n\\addtolength{\\textheight}{0.8in}\n\\addtolength{\\topmargin}{-.4in}\n\\newtheoremstyle{quest}{\\topsep}{\\topsep}{}{}{\\bfseries}{}{ }{\\thmname{#1}\\thmnote{ #3}.}\n\\theoremstyle{quest}\n\\newtheorem*{definition}{Definition}\n\\newtheorem*{theorem}{Theorem}\n\\newtheorem*{question}{Problem}\n\\newtheorem*{exercise}{Exercise}\n\\newtheorem*{challengeproblem}{Challenge Problem}\n\n\\newcommand{\\name}{John Jeng}\n\\newcommand{\\hw}{2}\n\n\\title{\\vspace{-50pt}\n\\Huge \\name\n\\\\\\vspace{20pt}\n\\huge CSE 373\\hfill Homework \\hw}\n\\author{}\n\\date{}\n\\pagestyle{myheadings}\n\\markright{\\name\\hfill Homework \\hw\\qquad\\hfill}\n\n% Custom commands\n\\newcommand{\\sumleft}{\\sum\\limits_{i=1}^n i^3}\n\\newcommand{\\sumright}{\\left(\\sum\\limits_{i=1}^n i \\right)^2}\n\\newcommand{\\Z}{\\mathbb{Z}}\n\\newcommand{\\C}{\\mathbb{C}}\n\n\\begin{document}\n\\maketitle\n\\begin{question}[1]\n\tProve by induction that for all n greater than or equal to :\n\t\\[\\sumleft = \\sumright\\]\n\\end{question}\n\\begin{proof}\n\\begin{align*}\n   \\sum\\limits_{i=1}^n i &= \\frac{n(n+1)}{2} & \\text{Starting with what we know} \\\\\n\t\\sumright &= \\frac{n^2(n+1)^2}{4}  & \\text{And by applying what we want}\n\\end{align*}\nNow we proceed by induction to show that:\n\\[\\sumleft = \\frac{n^2(n+1)^2}{4}\\]\n\nIn the base case where $n = 1$, \n\\[\\sumleft = \\frac{n^2(n+1)^2}{4} = \\frac{4}{4} = 1\\]\n\nNow if we assume it is true for $n$, we proceed to show it must be true for $n+1$.\n\\\\By definition of summations, if we have some $f(n)$ is a summation \n\\\\and $f(g(i)) = \\sum\\limits_{i=1}^n g(i)$ then:\n\\[f(n+1) = f(n) + g(n+1)\\]\n\nThus if we have $g(i) = i^3$, we must show\n\\[\\frac{(n+1)^2(n+2)^2}{4} = \\frac{n^2(n+1)^2}{4} + (n+1)^3\\] \n\n\\begin{align*}\n\t\\frac{(n+1)^2(n+2)^2}{4} &= \\frac{(n^2 + 2n + 1)(n^2 + 4n + 4)}{4} \\\\\n\t&= \\frac{n^4+4n^3+4n^2+2n^3+8n^2+8n+n^2+4n+4}{4} \\\\\n\t&= \\frac{n^4+6n^3+13n^2+12n+4}{4} \\\\\n\t\\frac{n^2(n+1)^2}{4} + (n+1)^3 &= \\frac{n^2(n^2+2n+1)}{4}+(n+1)(n^2+2n+1) \\\\\n\t&= \\frac{n^4+2n^3+n^2}{4} + \\frac{4n^3+8n^2+4n+4n^2+8n+4}{4} \\\\\n\t&= \\frac{n^4+6n^3+13n^2+12n+4}{4} \\\\\n\\end{align*}\nThus we have what we want and we are finished.\n\\end{proof}\n\n\\begin{question}[2]\n\tOrder the following functions from slowest growth rate to the fastest growth rate.\n\t\\[n^2, n\\log n, \\frac{2}{n}, \\log^2 n, 2^n \\sqrt{n}, 56,\n\t\tn^2\\log n, n^{1.5}, 2^{n/2}, \\log n, n\\log n^2, n^5, \n\t\tn\\log\\log n, n\\log^2 n, n\\]\n\\end{question}\n\\[\\]\n\n\\begin{question}[3a]\n\n\\end{question}\n\n\\begin{question}[3b]\n\n\\end{question}\n\\begin{proof}\n\n\\end{proof}\n\n\\begin{question}[3c]\n\n\\end{question}\nTrue\n\n\\end{document}"]],0,0,2656,0]],"time":1421967486184}