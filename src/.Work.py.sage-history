"#!/usr/bin/python\n#\n# Work objects\n#\n\n\nclass Volunteer:\n    \"\"\"\n    Represents a single volunteer\n    String name - Name of the volunteer\n    Int capacity - How many hours this volunteer has available\n    Int current_capacity - How many available hours the volunteer current has\n    [Job] jobs - Current list of jobs assigned to volunteer\n    Boolean is_used - True if the volunteer's job list is not empty\n    \"\"\"\n    def __init__(self, a_name=\"\", a_capacity=4):\n        self.name = a_name\n        self.capacity = a_capacity\n        self.current_capacity = 0\n        self.jobs = []\n        self.is_used = False\n\n    def __cmp__(self, other):\n        return -cmp(self.current_capacity, other.current_capacity)\n\n    def __repr__(self):\n        return self.name\n\n    def add_job(self, a_job):\n        self.jobs.append(a_job)\n        if not a_job.name.startswith(\"UNAVAILABLE\"):\n            self.current_capacity += a_job.length\n            self.is_used = True\n\n    def can_take_job(self, a_job):\n        for current_job in self.jobs:\n            if a_job.conflicts_with(current_job):\n                return False\n\n        if (self.current_capacity + a_job.length) > self.capacity:\n            return False\n\n        return True\n\n    def print_schedule(self):\n        self.jobs = sorted(self.jobs, key=lambda x: x.start)\n        print \"Name: %s :: Hours %s\" % (self.name, self.capacity)\n        for j in self.jobs:\n            print \"\\t%s :: %s - %s\" % (j.name, j.start, j.end)\n\n    def clear_all(self):\n        self.jobs = filter(lambda x: x.name.startswith('UNAVAILABLE'), self.jobs)\n        self.current_capacity = 0\n        self.is_used = False\n\n\nclass JobShift:\n    \"\"\"\n    Represents a single shift\n    String name - name of the shift\n    Int start - shift's start time\n    Int end - shift's end time\n    [Int] interval - all hours covered by this shift\n    Int length - total number of hours for this shift\n    \"\"\"\n    def __init__(self, a_name, a_time_interval):\n        self.name = a_name\n        self.start, self.end  = a_time_interval\n        self.interval = set(range(self.start, self.end+1))\n        self.length = self.end - self.start\n\n    def __cmp__(self, other):\n        return -cmp(self.length, other.length)\n\n    def __repr__(self):\n        return \"%s :: %s - %s\" % (self.name, self.start, self.end)\n\n    def conflicts_with(self, another_job):\n        return len(self.interval & another_job.interval) > 1\n"
{"patch":[[[[0,"t empty\n    \"\"\"\n"],[1,"\n"],[0,"    def __init__"]],399,399,32,33]],"time":1425289621379}
{"patch":[[[[0,"\n    \"\"\""],[1,"\n   "],[0,"\n\n    de"]],406,406,16,20]],"time":1425289619771}
{"patch":[[[[0," \"\"\"\n   "],[1," "],[0,"\n\n    de"]],410,410,16,17]],"time":1425289619023}
{"patch":[[[[0," \"\"\"\n   "],[-1," "],[0,"\n\n    de"]],410,410,17,16]],"time":1425289600667}
{"patch":[[[[0," \"\"\"\n   "],[1," "],[0,"\n\n    de"]],410,410,16,17]],"time":1425289599869}
{"patch":[[[[0,"\n    \"\"\""],[-1,"\n    "],[0,"\n\n    de"]],406,406,21,16]],"time":1425289599155}
{"patch":[[[[0,"    \"\"\"\n"],[1," "],[0,"\n    def"]],407,407,16,17]],"time":1425289598396}
{"patch":[[[[0,"   \"\"\"\n "],[1,"   \n"],[0,"\n    def"]],408,408,16,20]],"time":1425289597615}
{"patch":[[[[0,"\"\"\n    \n"],[1,"   "],[0,"\n    def"]],412,412,16,19]],"time":1425289596923}
{"patch":[[[[0,"    \n   "],[1," "],[0,"\n    def"]],415,415,16,17]],"time":1425289596109}
{"patch":[[[[0,"\"\"\n    \n"],[-1,"    \n"],[0,"    def "]],412,412,21,16]],"time":1425289593919}
{"patch":[[[[0,"\"\"\"\n"],[-1,"    \n"],[0,"    "]],411,411,13,8]],"time":1425289593153}